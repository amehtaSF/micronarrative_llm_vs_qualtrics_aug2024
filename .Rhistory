model == "otherUnderstand" ~ "Others would \nunderstand \nexperience",
model == "privacy" ~ "Privacy \nconcerns"
))
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Model",
y = "Estimate",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_plot <- bind_rows(df_plot_form %>% mutate(condition = "form"),
df_plot_bot %>% mutate(condition = "bot")) %>%
mutate(model = case_when(
model == "articulate" ~ "Helpful in \narticulating",
model == "difficult" ~ "Difficult to\n respond",
model == "valuable" ~ "Valuable \nfor youth",
model == "recommend" ~ "Would \nRecommend",
model == "acc_obj" ~ "Accurate \ncapturing \nsituation",
model == "acc_feel" ~ "Accurate \ncapturing\n feelings",
model == "otherUnderstand" ~ "Others would \nunderstand \nexperience",
model == "privacy" ~ "Privacy \nconcerns"
)) %>%
mutate(model = fct_reorder(model, est, .desc=T))
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "Estimate",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h_form_lower <- c(
"mu" = "plogis(Intercept + methodbot) - plogis(Intercept) < 0"
)
h_form_higher <- c(
"mu" = "plogis(Intercept + methodbot) - plogis(Intercept) > 0"
)
round_n <- 2
format_ci <- function(h, digits=round_n, h_idx=1) {
paste0(
"[",
formatC(h$hypothesis$CI.Lower[[h_idx]]*100, digits=digits, format="f"),
", ",
formatC(h$hypothesis$CI.Upper[[h_idx]]*100, digits=digits, format="f"),
"]"
)
}
(h_articulate_bp_95 <- hypothesis(fit_articulate_bp_beta, h_form_lower, alpha=.05))
(h_difficult_bp_95 <- hypothesis(fit_difficult_bp_beta, h_form_higher, alpha=.05))
(h_valuable_bp_95 <- hypothesis(fit_valuable_bp_beta, h_form_lower, alpha=.05))
# (h_feelingChange_bp_95 <- hypothesis(fit_feelingChange_bp_beta, h_form_lower, alpha=.05))
(h_recommend_bp_95 <- hypothesis(fit_recommend_bp_beta, h_form_lower, alpha=.05))
(h_acc_obj_bp_95 <- hypothesis(fit_acc_obj_bp_beta, h_form_lower, alpha=.05))
(h_acc_feel_bp_95 <- hypothesis(fit_acc_feel_bp_beta, h_form_lower, alpha=.05))
(h_otherUnderstand_bp_95 <- hypothesis(fit_otherUnderstand_bp_beta, h_form_lower, alpha=.05))
(h_privacy_bp_95 <- hypothesis(fit_privacy_bp_beta, h_form_higher, alpha=.05))
t <- tribble(
~model, ~mu, ~mu95,
"articulate", h_articulate_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_articulate_bp_95),
"difficult", h_difficult_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_difficult_bp_95),
"valuable", h_valuable_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_valuable_bp_95),
# "feelingChange", h_feelingChange_bp_95$hypothesis$Estimate[[1]], format_ci(h_feelingChange_bp_95),
"recommend", h_recommend_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_recommend_bp_95),
"acc_obj", h_acc_obj_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_acc_obj_bp_95),
"acc_feel", h_acc_feel_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_acc_feel_bp_95),
"otherUnderstand", h_otherUnderstand_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_otherUnderstand_bp_95),
"privacy", h_privacy_bp_95$hypothesis$Estimate[[1]]*100, format_ci(h_privacy_bp_95)
) %>%
mutate(mu = formatC(mu, digits=round_n, format="f"))
view(t)
t %>%
write_csv("~/Downloads/beta_table_bp.csv")
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300)
p <- dfp %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition, fill = condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Model",
y = "Estimate",
fill = "Condition"
)
ggsave(p, "~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300)
(p <- dfp %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition, fill = condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Model",
y = "Estimate",
fill = "Condition"
))
dfp %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition, fill = condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Model",
y = "Estimate",
fill = "Condition"
)
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300)
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
dfp %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition, fill = condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Model",
y = "Estimate",
fill = "Condition"
)
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "Estimate",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "Estimate",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))
ggsave("~/Downloads/beta_plot_bp.png", width=6, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "Estimate",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "μ of estimated beta distribution",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "<i>μ</i> of estimated beta distribution",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "*μ* of estimated beta distribution",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
df_plot %>%
ggplot(aes(x = model, y = est, ymin = hdi_lo, ymax = hdi_hi, color=condition)) +
geom_pointrange(position = position_dodge(width = .5)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# coord_flip() +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "",
y = "μ of estimated beta distribution",
fill = "Condition"
) +
# multiply the y-axis by 100 but not percent format
scale_y_continuous(labels = scales::number_format(scale = 1e2),
limits = c(0,1)) +
# rotate x axis labels and make text bigger
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))
ggsave("~/Downloads/beta_plot_bp.png", width=8, height=6, dpi=300, bg="white")
# Chunk 1
# devtools::install_github("amehtaSF/rsurveyutils")
library(rsurveyutils)
library(qualtRics)
library(here)
library(lubridate)
library(tidyverse)
library(tidylog)
theme_set(theme_bw())
# Chunk 2
filepath <- sprintf("%s/micronarrative_llm_vs_qualtrics_aug2024.csv", recent_date_dir(here("data/raw")))
df_file <- read_survey(here(filepath))
# Chunk 3
codebook_filepath <- "data/micronarrative_llm_vs_qualtrics_aug2024_codebook.xlsx"
codebook_vars <- readxl::read_excel(here(codebook_filepath), sheet="variables")
# codebook_values <- readxl::read_excel(here(codebook_filepath), sheet="values")
# Chunk 4
df_raw <- df_file %>%
janitor::clean_names() %>%
mutate(start_date = ymd_hms(start_date),
end_date = ymd_hms(end_date)) %>%
# -- remove rows without prolific pid -- #
filter(nchar(pid) == 24) %>%
# -- remove qualtrics erroneous header -- #
# slice(-1) %>%
# -- add raw data file name -- #
mutate(rawDataFile = filepath) %>%
# -- drop columns with all NA -- #
select(-where(~all(is.na(.)))) %>%
# -- rename columns -- #
codebook_renamer(names_from=codebook_vars$old_name,
names_to=codebook_vars$new_name)
# Chunk 5
df_recoded <- df_raw %>%
# -- recode variables -- #
codebook_recoder(var_regex=codebook_values$var_regex,
values_from=codebook_values$old_value,
values_to=codebook_values$new_value) %>%
# -- coding it so higher values refer to bot preference -- #
mutate_at(vars(ends_with("compare")), ~ifelse(left_side == "bot", .*-1, .))
# Chunk 6
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary))
# df_recoded %>%
#   filter(chatbot_summary == "" | is.na(chatbot_summary)) %>%
#   view
# -- Check for duplicates -- #
df_proc %>%
group_by(pid) %>%
summarize(n = n()) %>%
arrange(desc(n))
View(df_proc)
df_proc$qualtrics_summary
df_proc$qualtrics_summary == df_proc$qualtrics_summary_157
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary)) %>%
select(-qualtrics_summary_157) %>%
# df_recoded %>%
#   filter(chatbot_summary == "" | is.na(chatbot_summary)) %>%
#   view
# -- Check for duplicates -- #
df_proc %>%
group_by(pid) %>%
summarize(n = n()) %>%
arrange(desc(n))
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary)) %>%
select(-qualtrics_summary_157)
filepath_output <- paste0("data/proc/micronarrative_llm_vs_qualtrics_aug2024_proc.csv")
df_proc %>%
write_csv(here(filepath_output))
# Chunk 1
# devtools::install_github("amehtaSF/rsurveyutils")
library(rsurveyutils)
library(qualtRics)
library(here)
library(lubridate)
library(tidyverse)
library(tidylog)
theme_set(theme_bw())
# Chunk 2
filepath <- sprintf("%s/micronarrative_llm_vs_qualtrics_aug2024.csv", recent_date_dir(here("data/raw")))
df_file <- read_survey(here(filepath))
# Chunk 3
codebook_filepath <- "data/micronarrative_llm_vs_qualtrics_aug2024_codebook.xlsx"
codebook_vars <- readxl::read_excel(here(codebook_filepath), sheet="variables")
# codebook_values <- readxl::read_excel(here(codebook_filepath), sheet="values")
# Chunk 4
df_raw <- df_file %>%
janitor::clean_names() %>%
mutate(start_date = ymd_hms(start_date),
end_date = ymd_hms(end_date)) %>%
# -- remove rows without prolific pid -- #
filter(nchar(pid) == 24) %>%
# -- remove qualtrics erroneous header -- #
# slice(-1) %>%
# -- add raw data file name -- #
mutate(rawDataFile = filepath) %>%
# -- drop columns with all NA -- #
select(-where(~all(is.na(.)))) %>%
# -- rename columns -- #
codebook_renamer(names_from=codebook_vars$old_name,
names_to=codebook_vars$new_name)
# Chunk 5
df_recoded <- df_raw %>%
# -- recode variables -- #
codebook_recoder(var_regex=codebook_values$var_regex,
values_from=codebook_values$old_value,
values_to=codebook_values$new_value) %>%
# -- coding it so higher values refer to bot preference -- #
mutate_at(vars(ends_with("compare")), ~ifelse(left_side == "bot", .*-1, .))
# Chunk 6
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary)) %>%
select(-qualtrics_summary_157)
# df_recoded %>%
#   filter(chatbot_summary == "" | is.na(chatbot_summary)) %>%
#   view
# -- Check for duplicates -- #
df_proc %>%
group_by(pid) %>%
summarize(n = n()) %>%
arrange(desc(n))
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary)) %>%
select(-qualtrics_summary_157, -ip_address)
filepath_output <- paste0("data/proc/micronarrative_llm_vs_qualtrics_aug2024_proc.csv")
df_proc %>%
write_csv(here(filepath_output))
# Chunk 1
# devtools::install_github("amehtaSF/rsurveyutils")
library(rsurveyutils)
library(qualtRics)
library(here)
library(lubridate)
library(tidyverse)
library(tidylog)
theme_set(theme_bw())
# Chunk 2
filepath <- sprintf("%s/micronarrative_llm_vs_qualtrics_aug2024.csv", recent_date_dir(here("data/raw")))
df_file <- read_survey(here(filepath))
# Chunk 3
codebook_filepath <- "data/micronarrative_llm_vs_qualtrics_aug2024_codebook.xlsx"
codebook_vars <- readxl::read_excel(here(codebook_filepath), sheet="variables")
# codebook_values <- readxl::read_excel(here(codebook_filepath), sheet="values")
# Chunk 4
df_raw <- df_file %>%
janitor::clean_names() %>%
mutate(start_date = ymd_hms(start_date),
end_date = ymd_hms(end_date)) %>%
# -- remove rows without prolific pid -- #
filter(nchar(pid) == 24) %>%
# -- remove qualtrics erroneous header -- #
# slice(-1) %>%
# -- add raw data file name -- #
mutate(rawDataFile = filepath) %>%
# -- drop columns with all NA -- #
select(-where(~all(is.na(.)))) %>%
# -- rename columns -- #
codebook_renamer(names_from=codebook_vars$old_name,
names_to=codebook_vars$new_name)
# Chunk 5
df_recoded <- df_raw %>%
# -- recode variables -- #
codebook_recoder(var_regex=codebook_values$var_regex,
values_from=codebook_values$old_value,
values_to=codebook_values$new_value) %>%
# -- coding it so higher values refer to bot preference -- #
mutate_at(vars(ends_with("compare")), ~ifelse(left_side == "bot", .*-1, .))
# Chunk 6
df_proc <- df_recoded %>%
# -- remove columns with all NA -- #
select_if(~!all(is.na(.))) %>%
filter(age <= 20) %>%
filter(progress == 100 & finished == TRUE) %>%
filter(use_survey == "Yes") %>%
filter(use_survey_form == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(use_survey_bot == "Yes, I see my narrative and it is a valid challenging social media experience.") %>%
filter(`ac_90-100` >= 90 & `ac_90-100` <= 100) %>%
filter(`ac_65-70` >= 65 & `ac_65-70` <= 70) %>%
filter(chatbot_summary != "" & !is.na(chatbot_summary)) %>%
select(-qualtrics_summary_157, -ip_address)
# df_recoded %>%
#   filter(chatbot_summary == "" | is.na(chatbot_summary)) %>%
#   view
# -- Check for duplicates -- #
df_proc %>%
group_by(pid) %>%
summarize(n = n()) %>%
arrange(desc(n))
id = "62e6b8e474c98b1aa8ad01e1"
df_file %>%
filter(pid == id) %>%
view
id = "66956d95d62534ce26326202"
df_file %>%
filter(pid == id) %>%
view
